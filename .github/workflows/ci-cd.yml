name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Check formatting with black
        run: |
          black --check .
          
      - name: Check imports with isort
        run: |
          isort --check-only --profile black .

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
          
      - name: Run unit tests
        run: |
          pytest tests/test_comprehensive.py -v --cov=lib --cov-report=xml
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  minikube-tests:
    name: Minikube Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        k8s-version: ['v1.24.0', 'v1.25.0', 'v1.26.0']
        cni: ['calico', 'flannel', 'weave']
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      - name: Make test scripts executable
        run: |
          chmod +x tests/minikube/setup/*.sh
          chmod +x tests/minikube/validation/*.sh
          chmod +x tests/minikube/run-tests.sh
          
      - name: Run Minikube tests
        run: |
          cd tests/minikube
          ./run-tests.sh --cni ${{ matrix.cni }} --kubernetes-version ${{ matrix.k8s-version }} --skip-cleanup
        env:
          MINIKUBE_MEMORY: 4096
          MINIKUBE_CPUS: 2
          
      - name: Collect logs on failure
        if: failure()
        run: |
          mkdir -p logs
          kubectl get pods --all-namespaces -o wide > logs/pods.txt
          kubectl get nodes -o wide > logs/nodes.txt
          kubectl describe nodes > logs/nodes-describe.txt
          kubectl get events --all-namespaces --sort-by='.metadata.creationTimestamp' > logs/events.txt
          minikube logs > logs/minikube.txt
          
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: logs-${{ matrix.cni }}-${{ matrix.k8s-version }}
          path: logs/

  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [unit-tests, minikube-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: |
          python -m build
          
      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  publish-package:
    name: Publish Python Package
    runs-on: ubuntu-latest
    needs: build-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [unit-tests, minikube-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements.txt
          
      - name: Build documentation
        run: |
          mkdocs build
          
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: site
          path: site/

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download documentation
        uses: actions/download-artifact@v3
        with:
          name: site
          path: site/
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
